pipeline {
  agent {
    label 'docker'
  }

  environment {
   
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/teincsolutions/willfind8.git'
      }
    }

    stage('Create Docker .env from Jenkins Credentials') {
      steps {
        withCredentials([
          string(credentialsId: 'pg-user', variable: 'POSTGRES_USER'),
          string(credentialsId: 'pg-pass', variable: 'POSTGRES_PASSWORD'),
          string(credentialsId: 'pgadmin-email', variable: 'PGADMIN_DEFAULT_EMAIL'),
          string(credentialsId: 'pgadmin-pass', variable: 'PGADMIN_DEFAULT_PASSWORD'),
          string(credentialsId: 'minio-user', variable: 'MINIO_ROOT_USER'),
          string(credentialsId: 'minio-pass', variable: 'MINIO_ROOT_PASSWORD')
        ]) {
          sh '''
            echo "POSTGRES_USER=$POSTGRES_USER" > jenkins.env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> jenkins.env
            echo "PGADMIN_DEFAULT_EMAIL=$PGADMIN_DEFAULT_EMAIL" >> jenkins.env
            echo "PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD" >> jenkins.env
            echo "MINIO_ROOT_USER=$MINIO_ROOT_USER" >> jenkins.env
            echo "MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD" >> jenkins.env
            chmod 600 jenkins.env
          '''
        }
      }
    }

    stage('Build Web') {
      steps {
        dir('apps/user-web') {
          sh 'npm install'
          sh 'npm run build'
        }
      }
    }

    stage('Build API') {
      steps {
        dir('apps/api-server') {
          sh 'npm install'
          sh 'npm run build'
        }
      }
    }

    stage('Deploy Services') {
      steps {
        dir('infra') {
          sh 'docker compose --env-file ../jenkins.env up -d --build'
        }
      }
    }
  }

  post {
    always {
      sh 'rm -f jenkins.env'
    }
  }
}
